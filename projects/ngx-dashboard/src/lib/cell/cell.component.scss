// cell.component.sccs

:host {
  display: block;
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
  container-type: inline-size; // Enable container queries
}

// When any drag is active, disable pointer events on non-dragging cells
// This allows drag events to pass through to drop zones underneath
:host(.drag-active):not(.is-dragging) {
  pointer-events: none;
}

:host(.is-dragging) {
  z-index: 100; // While dragging
  opacity: 0.5;
  pointer-events: none; // Allow drag events to pass through to drop zones

  // Ensure content area also doesn't block events during drag
  .content-area {
    pointer-events: none;
  }
}

/* Ensure flat-mode cells also become transparent when dragged */
// :host(.is-dragging) .cell.flat .content-area {
//   pointer-events: none;
// }

:host(:hover) .resize-handle {
  opacity: 1;
}

.cell {
  width: 100%;
  height: 100%;
  //  background-color: white;
  border-radius: 4px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  padding: 0;
  box-sizing: border-box;
  overflow: hidden;
  position: relative; // for overlay positioning
  container-type: inline-size; // enable container queries on cell

  &:hover {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }

  // Flat mode styles
  &.flat {
    box-shadow: none;
    border: none; //1px solid #e0e0e0;

    &:hover {
      box-shadow: none;
      transform: none;
      border-color: #bdbdbd;
    }
  }

  // prevent text selection during resize
  &.resizing {
    user-select: none;
  }
}

.content-area {
  width: 100%;
  height: 100%;
  overflow: auto;
  // Ensure widget hover events work independently of cell hover state
  pointer-events: auto;
  position: relative;
  z-index: 1;

  // Isolate widget content from parent hover effects
  &:hover {
    // Reset any inherited hover effects that might interfere with widget hover
    transform: initial;
  }
}

// Ensure flat mode doesn't interfere with widget hover events
// but only allow pointer events in flat mode if NOT dragging
:host(:not(.is-dragging)) .cell.flat .content-area {
  // Explicitly ensure widget hover works in flat mode
  pointer-events: auto;

  &:hover {
    // Prevent flat mode hover reset from affecting widget content
    transform: initial;
  }
}

///
/// Resize stuff
///
.resize-handle {
  position: absolute;
  z-index: 20;
  // transition: opacity 0.2s ease;

  &--right {
    cursor: col-resize;
    width: 16px;
    height: 100%;
    right: -8px;
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;

    &:hover {
      opacity: 1;

      .resize-handle-line {
        background-color: var(--mat-sys-primary-container);
        // background-color: #2196f3;
      }
    }
  }

  &--bottom {
    cursor: row-resize;
    width: 100%;
    height: 16px;
    bottom: -8px;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;

    &:hover {
      opacity: 1;

      .resize-handle-line {
        background-color: var(--mat-sys-primary-container);
        // background-color: #2196f3;
      }
    }
  }
}

.resize-handle-line {
  background-color: rgba(0, 0, 0, 0.1);
  // transition: background-color 0.2s ease;

  .resize-handle--right & {
    width: 8px;
    height: 40px;
    border-radius: 2px;
  }

  .resize-handle--bottom & {
    width: 40px;
    height: 8px;
    border-radius: 2px;
  }
}

.resize-preview {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--mat-sys-primary);
  color: var(--mat-sys-on-primary);

  // background: rgba(33, 150, 243, 0.9);
  // color: white;
  padding: 4px 12px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
  pointer-events: none;
  z-index: 30;
}

.cell.is-resizing {
  opacity: 0.6;
  .resize-handle {
    background-color: rgba(33, 150, 243, 0.5);
  }
}

// Global cursor classes for resize operations
// These are applied to document.body to ensure cursor shows everywhere during resize
:root {
  .cursor-col-resize {
    cursor: col-resize !important;
  }

  .cursor-row-resize {
    cursor: row-resize !important;
  }
}
